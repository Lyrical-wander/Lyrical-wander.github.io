[{"content":"前言 本文笔者吸取了第一次爬取微软翻译的经验，发现在对微软翻译进行请求的时候，URL会随着会话结束而重新生成，这一点是本文需要解决的内容，且除了URL中出现的IG和IID两个数据外，在请求的表单数据中，还有key和token两个数据也在动态变化。本文旨在追踪这几个数据在何时被发送，如何被获取。\n分析 首先，重新打开浏览器自带的开发者工具，随便翻译一词，让客户端发送一次翻译请求ttranslatev3，可以发现，这次URL与前一篇文章基于PyQt开发的脚本集合包（八）的又不一致\nhttps://cn.bing.com/ttranslatev3?isVertical=1\u0026\u0026IG=DFFF2F46AAE0482491F67EEEB26C249C\u0026IID=translator.5025\n笔者借助开发者工具自带的搜索框进行搜索，看看我们需要的数据在哪里出现过\n除了上一篇文章中提到的IG和IID两个数据外，我们还需要找到token和key两个数据，在ttranslatev3响应请求中，可以看到我们发送请求时，请求表单除了携带需要翻译的文本，翻译前的语种，翻译后的语种外，还需携带两个特殊的信息\n至于tryFetchingGenderDebiasedTranslations一直为true，因此直接填写即可\nIG 找到IG所在 首先看看IG在哪里出现过，将IG的数据DFFF2F46AAE0482491F67EEEB26C249C复制进搜索框查询，得到以下信息\n可以发现，搜索出来的大部分请求中，这一串数据都是出现在URL与path中的，也就是说，这些请求中，IG数据也是被使用的，并不是出自于这些请求，继续向下滑动，找到了一个translator的包\n如果你点击进去，就会发现，这其实就是访问该页面的第一个请求响应，它的html数据构建了整个页面\n现在我们查看IG数据在这个响应的哪里，点击刚刚搜索的地方，会自动跳转到response出现了相同信息的地方，如下图所示：\n因此，现在重新确认一下目标：目标从“找到IG数据的出处”变更为“获取IG数据”。\n请求获取IG数据 来观察一下这个请求响应，回顾一下上一篇文章，我们在请求时需要些什么数据：\nURL、User-Agent、表单数据\n那我们依次来找这个请求所需要的数据，首先看标头：\nURL\n这个URL携带的信息很好猜，https://cn.bing.com/translator是访问的主机，即微软搜索引擎bing的翻译页面，?表示后面携带了多个参数，ref=TThis这通常表示一个参考信息或来源标识符。可能是用来跟踪用户从哪个链接访问了翻译工具，text表示默认的翻译文本，from表示翻译前的语种，to表示目标语种。可以看到，这里后面携带的三个信息，正好是打开网页时的默认信息\n“输入文本”是背景，实际上并没有东西在这里。\n可以猜测，每次访问这个页面，URL大概率是不会发生变化的，没有携带什么特殊的信息。经过反复的刷新和测试，验证了这个猜想。\nUser-Agent\n为什么User-Agent会是一样的？需不需要担心它会不会变化？来看一下User-Agent的定义：\n在进行网页爬虫时，User-Agent 是一个非常重要的 HTTP 请求头字段，它的主要作用是向服务器提供有关请求者（通常是浏览器或爬虫）的一些信息。具体来说，它会告诉服务器，发出请求的客户端是什么类型的设备，操作系统，浏览器等。不同的服务器和网站可能根据 User-Agent 来决定如何响应请求，比如返回不同的内容、样式，或者限制对某些类型客户端的访问。\nUser-Agent 的作用总结： 识别客户端： User-Agent 向服务器表明请求是由哪个客户端发出的。对于不同的浏览器、操作系统或设备，User-Agent 会有所不同。例如，Chrome、Firefox、Safari、IE 等不同浏览器会有不同的 User-Agent 字符串。 避免被识别为爬虫： 网站可能会根据 User-Agent 来识别是否是爬虫程序。很多爬虫程序没有设置真实的 User-Agent，或者 User-Agent 字符串看起来像是一个自动化脚本（比如 Python 的 requests 库默认 User-Agent 是一个简单的字符串）。一些网站会使用这一点来检测并阻止爬虫请求。因此，为了模拟浏览器，爬虫通常会伪装成浏览器的 User-Agent，避免被网站识别为爬虫。 返回适配的内容： 根据 User-Agent，服务器可以返回特定格式的内容。比如，移动设备和桌面设备通常会看到不同版本的网页，甚至不同的图片大小和样式。通过查看 User-Agent，服务器可以判断请求来自于手机、平板、桌面或其他设备，并返回不同的页面样式或功能。 分辨设备和浏览器版本： User-Agent 可以帮助服务器确定访问者的设备类型、操作系统及浏览器版本，从而优化响应内容。比如，某些页面可能会针对不同的操作系统（如 Windows、macOS、Linux）或不同版本的浏览器提供特定的网页布局或 JavaScript 功能。 可以看出，一些服务器会根据User-Agent来判断访问请求是不是来自人类或自动化脚本，可做一些反爬虫操作。我们从浏览器获取的请求信息中包含的User-Agent，表明了这段请求时来自浏览器，而非自动化脚本，因此，我们可以回答上面的问题：1.User-Agent一样是因为我们今天与昨天用的都是同一个浏览器访问，它代表了“该请求来自Edge浏览器”。2.无需担心它会发生变化，除非浏览器更新会更改这项数据，而这大概率是不会发生的。\n代码实现 首先，先获取整个response的html数据，把它写在一个单独的文件里，（数据量太大，操作台无法查找相应的数据），有些导入的模块会在后面的代码中用到，这仅是完整代码的一部分\n1 2 3 4 5 6 7 8 9 10 11 12 13 import requests import re from bs4 import BeautifulSoup from urllib import response import urllib.request import json url = \u0026#34;https://cn.bing.com/translator?ref=TThis\u0026amp;text=\u0026amp;from=zh-Hans\u0026amp;to=en\u0026#34; header = {\u0026#34;user-agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0\u0026#34;} response = requests.get(url,headers=header,data={}) response.raise_for_status() html = response.text with open(\u0026#34;translator.html\u0026#34;, \u0026#34;w\u0026#34;, encoding=\u0026#34;utf-8\u0026#34;) as f: f.write(html) 获取到相应的HTML，直接搜索IG\n现在，我们找到了这个数据，用正则表达式将数据获取，其中re.search方法是调用第三方库re\n1 ig = re.search(r\u0026#39;IG:\u0026#34;(\\w+)\u0026#34;\u0026#39;,html).group(1) # 使用正则表达式在html文件中查找IG数据并获取 IID 我们用同样地办法查找IID的所在地并获取它\n找到IID的所在 找到IID数据的所在，依然在translator请求响应中，这就好办了，因为该请求的完整相应已经被我们获取了，只要找到相应的位置即可。\n刚刚获取的HTML文件中，你可以找到多个带有data-iid属性的\u0026lt;div\u0026gt;，因此，我们需要更加详细的信息来确认其位置，比如利用前面的id=\u0026quot; tta_outGDCont\u0026quot;，\n代码实现 可以使用第三方库BeautifulSoup，获取html格式数据中特定的属性，比如data-iid\n1 2 3 4 soup = BeautifulSoup(html, \u0026#34;html.parser\u0026#34;) dev_element = soup.find(\u0026#34;div\u0026#34;, id = \u0026#34;tta_outGDCont\u0026#34;) data_iid = dev_element.attrs[\u0026#34;data-iid\u0026#34;] print(\u0026#34;data_iid:\u0026#34;+data_iid) 我们来解释一下soup = BeautifulSoup(html, \u0026quot;html.parser\u0026quot;)这一段代码\n1. BeautifulSoup BeautifulSoup 是一个 Python 库，主要用于从 HTML 或 XML 文档中提取数据。它提供了许多方法来帮助你遍历、搜索和修改 HTML/XML 文档的内容。\n2. html html 是传入 BeautifulSoup 构造函数的参数，通常是一个包含 HTML 内容的字符串。它代表了待解析的 HTML 文档。可以是从文件读取的内容，或者是通过网络请求获取的 HTML 页面。\n3. \u0026ldquo;html.parser\u0026rdquo; \u0026quot;html.parser\u0026quot; 是 BeautifulSoup 的一个解析器（parser）。它告诉 BeautifulSoup 使用 Python 内建的 HTML 解析器来解析传入的 HTML 文档。这个解析器是一个快速且有效的解析工具，但对于一些特殊的 HTML，可能处理得不如其他第三方解析器（如 lxml 或 html5lib）精准。\n\u0026quot;html.parser\u0026quot; 选项是 Python 默认的解析器，但如果你安装了 lxml 或 html5lib 等库，也可以指定其他解析器。例如：\n\u0026quot;lxml\u0026quot;：使用 lxml 库的 HTML 解析器。 \u0026quot;html5lib\u0026quot;：使用 html5lib 库，它更宽容于不规范的 HTML 代码。 4. 最终效果 这行代码的作用是：通过 BeautifulSoup 库，将传入的 HTML 字符串 html 解析成一个 BeautifulSoup 对象，并指定使用内建的 html.parser 解析器。解析后的 soup 对象可以用来方便地操作和提取 HTML 内容。\n剩下的代码看方法名称也很好理解它是做什么的\ntoken与key 找到token与key的所在 我们用相同的办法，通过搜索框查找token的所在地，发现，这个信息同样存在于translator请求响应中：\n如果你仔细一点，你会发现，token前面那串数字，就是我们下一个要找的key！真是得来全不费工夫，剩下的两个数据被我们一次性找到了，接下来就是获取它们。\n代码实现 1 2 3 4 pattern = r\u0026#39;var params_AbusePreventionHelper = \\[(\\d+),\u0026#34;([^\u0026#34;]+)\u0026#34;,\\d+\\];\u0026#39; token = re.findall(pattern, html) print(\u0026#34;key:\u0026#34;+token[0][0]) print(\u0026#34;token:\u0026#34;+token[0][1]) 同样地，我们使用正则表达式，查找var params_AbusePreventionHelper后面的两个数据，放在token列表中。\n小结 至此，我们找到了我们所需的全部数据，接下来只需要将IG与IID填进URL中，将token与key填进表单中，就可发送完整的请求，伪装成正常的浏览器请求了。\n请求与获取相应 代码实现 1 2 3 4 5 6 7 8 9 10 11 url = \u0026#34;https://cn.bing.com/ttranslatev3?isVertical=1\u0026amp;\u0026amp;IG=\u0026#34;+ig+\u0026#34;\u0026amp;IID=\u0026#34;+data_iid print(url) header = {\u0026#34;user-agent\u0026#34;:\u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0\u0026#34;} data = {\u0026#34;fromLang\u0026#34;:\u0026#34;zh-Hans\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;token\u0026#34;:token[0][1],\u0026#34;key\u0026#34;:token[0][0],\u0026#34;text\u0026#34;:\u0026#34;今天的天气\u0026#34;,\u0026#34;tryFetchingGenderDebiasedTranslations\u0026#34;:\u0026#34;true\u0026#34;} print(data) data = urllib.parse.urlencode(data).encode(\u0026#34;utf-8\u0026#34;) req = urllib.request.Request(url, data, headers=header) response = urllib.request.urlopen(req) html = response.read().decode(\u0026#34;utf-8\u0026#34;) target = json.loads(html) print(target[0][\u0026#39;translations\u0026#39;][0][\u0026#39;text\u0026#39;]) 根据上一篇文章的经验，以及本文上述的分析：\nURL需要根据上文所获取的IG与IID进行动态变换 data数据，将我们上面获取的token与key分别放入字典中 对数据进行UTF-8编码转换格式 发送请求 获取响应并进行UTF-8解码 转换JSON格式 获取数据 如果将进行UTF-8解码后的数据完整打印出来，将会是：\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 [ { \u0026#34;translations\u0026#34;:[ { \u0026#34;text\u0026#34;:\u0026#34;Today\u0026#39;s weather\u0026#34;, \u0026#34;to\u0026#34;:\u0026#34;en\u0026#34;, \u0026#34;sentLen\u0026#34;:{ \u0026#34;srcSentLen\u0026#34;:[ 5 ], \u0026#34;transSentLen\u0026#34;:[ 15 ] } } ], \u0026#34;detectedLanguage\u0026#34;:{ \u0026#34;language\u0026#34;:\u0026#34;zh-Hans\u0026#34; } }, { \u0026#34;inputTransliteration\u0026#34;:\u0026#34;jīntiān de tiānqì\u0026#34; } ] 我们要的就是translations列表下的第一个字典中text对应的value\n完整代码 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 from csv import Error from email.policy import HTTP from tkinter import E from urllib.error import URLError import requests import re from bs4 import BeautifulSoup from urllib import response import urllib.request import json class Translation: def __init__(self,content): self.translating(content) def translating(content,lfrom,lto): if content == \u0026#34;\u0026#34;: return \u0026#34;请输入内容\u0026#34; langfrom = {\u0026#34;自动检测\u0026#34;:\u0026#34;auto-detect\u0026#34;,\u0026#34;中文\u0026#34;:\u0026#34;zh-Hans\u0026#34;,\u0026#34;English\u0026#34;:\u0026#34;en\u0026#34;} langto = {\u0026#34;中文\u0026#34;:\u0026#34;zh-Hans\u0026#34;,\u0026#34;English\u0026#34;:\u0026#34;en\u0026#34;} url = \u0026#34;https://cn.bing.com/translator?ref=TThis\u0026amp;text=\u0026amp;from=zh-Hans\u0026amp;to=en\u0026#34; header = {\u0026#34;user-agent\u0026#34;: \u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0\u0026#34;} try: response = requests.get(url,headers=header,data={},timeout=5) except Exception as e: print(f\u0026#34;There are something wrong with the network: {e}\u0026#34;) return \u0026#34;website is not reachable\u0026#34; html = response.text soup = BeautifulSoup(html, \u0026#34;html.parser\u0026#34;) dev_element = soup.find(\u0026#34;div\u0026#34;, id = \u0026#34;tta_outGDCont\u0026#34;) data_iid = dev_element.attrs[\u0026#34;data-iid\u0026#34;] print(\u0026#34;data_iid:\u0026#34;+data_iid) ig = re.search(r\u0026#39;IG:\u0026#34;(\\w+)\u0026#34;\u0026#39;,html).group(1) print(\u0026#34;IG:\u0026#34;+ig) pattern = r\u0026#39;var params_AbusePreventionHelper = \\[(\\d+),\u0026#34;([^\u0026#34;]+)\u0026#34;,\\d+\\];\u0026#39; token = re.findall(pattern, html) print(\u0026#34;key:\u0026#34;+token[0][0]) print(\u0026#34;token:\u0026#34;+token[0][1]) url = \u0026#34;https://cn.bing.com/ttranslatev3?isVertical=1\u0026amp;\u0026amp;IG=\u0026#34;+ig+\u0026#34;\u0026amp;IID=\u0026#34;+data_iid print(url) header = {\u0026#34;user-agent\u0026#34;:\u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0\u0026#34;} data = {\u0026#34;fromLang\u0026#34;:langfrom[lfrom],\u0026#34;to\u0026#34;:langto[lto],\u0026#34;token\u0026#34;:token[0][1],\u0026#34;key\u0026#34;:token[0][0],\u0026#34;text\u0026#34;:content,\u0026#34;tryFetchingGenderDebiasedTranslations\u0026#34;:\u0026#34;true\u0026#34;} print(data) data = urllib.parse.urlencode(data).encode(\u0026#34;utf-8\u0026#34;) try: req = urllib.request.Request(url, data, headers=header) response = urllib.request.urlopen(req) html = response.read().decode(\u0026#34;utf-8\u0026#34;) target = json.loads(html) except Exception as e: print(f\u0026#39;There are something wrong with the network: {e}\u0026#39;) return \u0026#34;website is not reachable\u0026#34; try: print(\u0026#34;translations:\u0026#34;+target[0][\u0026#39;translations\u0026#39;][0][\u0026#39;text\u0026#39;]) except KeyError: print(target) return \u0026#34;something was wrong\u0026#34; return target[0][\u0026#39;translations\u0026#39;][0][\u0026#39;text\u0026#39;] 结语 这次，我们完成了对微软翻译的完整爬虫，且可以完美多次长时间地运行，这个脚本功能已经完善，只是还没有嵌入到GUI程序中，下一篇文章，我们将会把这个脚本整理一下，放到脚本工具包中供翻译器调用，且会加装一些网络状况的判断。\n如果你看到这里，说明你又变强了！希望你变得更强，感谢你的观看，共同进步！\n","date":"2024-11-08T12:02:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B9%9D/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B9%9D/","title":"基于PyQt开发的脚本集合包（九）"},{"content":"前言 本文虽然被归类于PyQt开发实战，但实际上并没有关于PyQt的相关知识，这篇文章着重基于上篇文章，讲述笔者在开发翻译器时如何做爬取微软翻译网站时的分析，如何获取到网站所需要的信息。这其中也是夹杂了许多笔者个人的猜想与运气才碰出来的，笔者对爬虫也没有做更深的学习，只有一些粗浅的理解，并结合这个项目一点一点摸出来的，可能有更专业的工具与更成体系的知识架构，笔者也要去学习，希望这篇文章对读者能起到一些帮助和启发。\n本文从笔者第一次爬取开始讲起，第一次失败了，总结了失败的经验，第二次才爬取成功。\n第一次爬取微软翻译 分析 在笔者进行爬虫的时候，首先先打开了浏览器自带的开发者工具查看网络数据，看看在翻译时客户端与服务器之间做了哪些交流\n在排查的过程中，发现有一个名称叫做ttranslate...的包引起了笔者的注意，点进去发现这其中确实携带了笔者要翻译的信息\n从上图中可以看到，包的负载中的表单数据中有一项Text，携带的数据刚好是我们输入的翻译内容你好。\n打开预览可以看到更详细的信息\n在这里可以发现：\n这里有我们翻译之前的语种，即：zh-Hans，简体中文 翻译后的文本，保存在一个名为translations的数据中，text:Hello，这个数据就是我们要获取的数据，其实这就是对于翻译请求的响应，打开响应界面也是这一串信息 响应界面如下：\n所以，本质上，笔者就是想要获得对于这个请求的响应，因此笔者的方法是模仿这个包的请求，读取它的响应，从而获得对应的翻译数据。\n实践 因此根据爬虫的流程，笔者先获取了ttranslate的请求URL，即：\nhttps://cn.bing.com/ttranslatev3?isVertical=1\u0026\u0026IG=94BF74DDDBA34ECB8B2CFB8D7960E4F9\u0026IID=translator.5025\n再获取了请求标头中的User-Agent，即：\nMozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/130.0.0.0 Safari/537.36 Edg/130.0.0.0\n如下图所示：\n获取URL是为了获取请求的目的地，获取User-Agent是为了让服务器认为我们是一个人，而不是脚本在自动操作（虽然真的是一个脚本），现在这两者已经获取，我们这段信息就有了身份。（虽然请求标头中还有许多其它的信息，但笔者也没搞懂有什么作用，索性也就没管）\n接下来这既然是一个请求，那么我们就需要携带需要请求的消息，消息的格式是什么呢？在负载中可以找到，负载就是请求的内容，如下图所示：\n显而易见的是，表单数据中携带了我们待翻译内容的语种，翻译结果的语种，以及翻译的数据。我们需要将这些信息放进我们的请求中。\n信息收集完毕，开始编写代码（下面展示代码主题，读者需要注意这其中还调用了第三方关于爬虫的库，如报错，请pip install 响应的第三方库）\n1 2 3 4 5 6 7 8 9 url = \u0026#34;https://cn.bing.com/ttranslatev3?isVertical=1\u0026amp;\u0026amp;IG=94BF74DDDBA34ECB8B2CFB8D7960E4F9\u0026amp;IID=translator.5025\u0026#34; header = {\u0026#34;user-agent\u0026#34;:\u0026#34;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/129.0.0.0 Safari/537.36 Edg/129.0.0.0\u0026#34;} data = {\u0026#34;fromLang\u0026#34;:\u0026#34;zh-Hans\u0026#34;,\u0026#34;to\u0026#34;:\u0026#34;en\u0026#34;,\u0026#34;text\u0026#34;:text} data = urllib.parse.urlencode(data).encode(\u0026#34;utf-8\u0026#34;) req = urllib.request.Request(url, data, headers=header) response = urllib.request.urlopen(req) html = response.read().decode(\u0026#34;utf-8\u0026#34;) target = json.loads(html) print(target[0][\u0026#39;translations\u0026#39;][0][\u0026#39;text\u0026#39;]) 以下，我们来逐行分析代码：\n将刚刚得到的URL存放起来 将user-agent也存放起来，存放在header字典中 将我们请求的数据：翻译前的语种，翻译后的语种，文本也存放起来，存放在data字典中 将data进行utf-8加密，转换成响应的url请求格式 使用Request方法发送请求，参数为url,data,header 使用urlopen方法获取响应 将响应解码 将JSON格式的字符串解析成python对象，比如字典，列表等 获取这个target中关于translation列表下的字典的text对应的值 总结 以上，是笔者的第一次爬虫，一开始爬取的时候使用正常，可以正常的使用，但没过多久，翻译器无法使用，无故闪退，笔者开始debug，发现已经无法通过这个url发送请求了。\n笔者开始整理，经过多次请求尝试和实验，发现url存在一些端倪：\nhttps://cn.bing.com/ttranslatev3?isVertical=1\u0026\u0026IG=94BF74DDDBA34ECB8B2CFB8D7960E4F9\u0026IID=translator.5025\n我们再来看一下这个URL，可以发现，这URL本身就携带了一些信息，IG与IID，这两个数据在每次会话结束后，都会发生变化，也就是说，当一个会话结束后，笔者所记录的IG与IID就失效了，无法访问，因此，这一次爬虫并不成功，还需要继续改进，获取每次访问微软翻译时的IG和IID数据。\n结语 总的来说，本文只是笔者在爬虫方向上的一次探索与学习，这是一次失败的尝试，不过可以看出，笔者在学习上的思路，笔者在学习时，喜欢在实践中发现问题并解决问题，因为理论与实践总是存在一定的差距，现实世界总是复杂且多变的。在实践中，你总会发现一些与理论有偏差或者相悖的地方，让你陷入迷茫，但是在实践中，你不会没有一点头绪，相反，在实践中，你有太多太多的方向去验证问题的本质，有时候往往是方向太多，你无法确定哪条路才能通向正确，你害怕做了无用功，害怕走错了方向，因此迟迟不敢动手，才导致了自己的踌躇不前。在现实世界中抽丝剥茧，也是一种学习，虽然笔者在这里也走错了路，离成功还有一段距离，但是走到这里，让笔者学会了如何看网络包，分析请求和响应，学会调用request库，以及最重要的找到了正确的道路，即：接下来，我们要想办法找到每一次IG和IID这两个数据如何变，在哪里变，如何获取到那个存放这两个数据的包。致敬技术，希望你变得更强！\n","date":"2024-11-07T19:16:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%85%AB/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%85%AB/","title":"基于PyQt开发的脚本集合包（八）"},{"content":"前言 上期文章我们讲了如何去实现一个UTF-8编码的转换器的构造以及代码实现。本期我们实现脚本集合包的第二个脚本（功能）：翻译器。目前，该翻译一起支持中译英，英译中，或自动检测翻译。翻译功能的实现本质上是通过爬虫技术去爬取网页实现的翻译功能，因此翻译功能需要联网才可进行。因此，在设计之初需要注意的是（虽然笔者并不是在设计之初就意识到会有这么多问题）：如何爬取一个网站，如何将需要翻译的内容上传给网站，是否需要判断当前状态是否联网，如何判断是否联网。如果处于断网状态如何处理\u0026hellip;\u0026hellip;接下来两到三篇文章会详细讲述这些问题如何解决。\n翻译器的UI布局 首先先看翻译器的UI布局\n可以看到这个翻译器的主要框架分为上中下三个部分，垂直分布，因此，主布局是一个垂直布局，三个部分分别是：翻译语言选择，翻译文本框，快速翻译三个部分。\n翻译语言选择：该部分由从左到右三个部分组成，水平布局，第一个下拉列表可选取待翻译语言的语种，包括：自动检测、中文、English三种，中间的组件是一个带有图标的按钮，可以转换左右下拉列表的语种，右边的下拉列表可选取翻译后的语种，包括：English、中文。 翻译文本框：该部分由从左到右三个部分组成，水平布局，第一个文本框是可读写文本框，可输入待翻译的内容，中间是一个按钮，点击按钮则开始翻译，右边文本框是一个只读文本框，在点击翻译按钮后，若翻译成功则会在该文本框中显示翻译后的内容。 快速翻译：快速翻译一个ListView，列表组件，其中存储了一个字典，显示对应的key，点击后会自动访问对应key的value，将value显示出来，无需联网，用于快速反应一些常用常翻译的内容。 代码解释 创建布局对象 根据上述UI的设计，我们可以创建对应的layout对象，并将子布局一次添加进主布局，主布局设置为widget的布局\n1 2 3 4 5 6 7 8 9 # create a horizontal layout layout = QVBoxLayout() # 主布局 langlayout = QHBoxLayout() # 翻译语言选择的布局 hlayout = QHBoxLayout() # 翻译文本框的布局 listlayout = QVBoxLayout() # 快速翻译列表的布局 layout.addLayout(langlayout) # 将三个子布局添加进主布局 layout.addLayout(hlayout) # 将三个子布局添加进主布局 layout.addLayout(listlayout) # 将三个子布局添加进主布局 self.setLayout(layout) # 将layout设置为该翻译器widget的布局 翻译语言的选择与切换UI设计 该部分由两个comboBox（下拉列表）和一个PushButton（按钮）组成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 # lang layout self.langfromcb = QComboBox(self) # 创建输入语言的下拉列表 self.langfromcb.addItem(\u0026#34;自动检测\u0026#34;) # 往下拉列表中添加元素 self.langfromcb.addItem(\u0026#34;中文\u0026#34;) self.langfromcb.addItem(\u0026#34;English\u0026#34;) self.langfromcb.setCurrentIndex(1) # 将下拉列表中的第二个元素（0为第一个）设置为默认选项 self.langtocb = QComboBox(self) # 创建输出语言的下拉列表 self.langtocb.addItems([\u0026#39;中文\u0026#39;,\u0026#39;English\u0026#39;]) # 往下拉列表中添加元素 self.langtocb.setCurrentIndex(1) # 将下拉列表中的第二个元素设置为默认选项 self.exchangebtn = QPushButton(self) # 创建交换语种的按钮 pixmap = QPixmap(\u0026#34;_internal/res/img/exchange.ico\u0026#34;) # 将图标添加进变量 self.exchangebtn.setIcon(QIcon(pixmap)) # 为按钮设置图标 self.exchangebtn.setIconSize(self.exchangebtn.sizeHint()) # 设置图标为自适应按钮大小 self.exchangebtn.setToolTip(\u0026#34;交换语言\u0026#34;) # 为按钮设置提示泡泡 self.exchangebtn.clicked.connect(self.tranasexchange) # 给按钮点击状态连接事件方法，该方法将调转输入与输出语种 langlayout.addWidget(self.langfromcb) # 将三个组件都加入到第一个子布局中 langlayout.addWidget(self.exchangebtn) langlayout.addWidget(self.langtocb) 在这一段代码值得注意的是：\n这段代码展示了之前文章未出现的组件，即下拉列表（ComboBox）。\n下拉列表有两种添加元素的方法，addItem()与addItems()，一个参数为单个元素，一个参数为list，可同时输入多个元素。\nsetCurrentIndex()方法可设置下拉列表的首选项，比如：下拉列表的顺序为：自动检测，中文，English，我想让中文成为默认选项，则可使用setCurrentIndex(1)来使得中文成为默认选项，因为python是从0开始算起的。\n按钮可以添加图标，这个图标的地址开头是__internal，为什么使用这个作为最高级目录，请看往期内容基于PyQt开发的脚本集合包（三）第三节初始化应用程序部分，在窗口标签部分讲过相关内容。\n按键的提示泡泡长这样，当鼠标放在按钮上，会弹出一个小框描述该按键的功能。\n翻译文本框的UI设计 该部分是由两个文本框与一个按键组成\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 # input editor self.editor = QTextEdit(self) # 创建输入文本框 self.editor.setPlaceholderText(\u0026#34;翻译内容\u0026#34;) # 设置文本框的背景内容 hlayout.addWidget(self.editor) # 将输入文本框添加到子布局中 TextEditStyle(self.editor) # 修改文本框的样式，作者创建的方法，非第三方库调用 # translation button self.button = QPushButton(\u0026#34;翻译\u0026#34;,self) # 创建翻译按钮 btnReleaseStyleA(self.button) # 修改按钮的样式，作者创建的方法，非第三方库调用 self.button.clicked.connect(self.translating) # 按钮点击状态连接到translating事件方法 hlayout.addWidget(self.button) # 将按钮添加到子布局中 # output edit self.textedit = QTextEdit(self) # 创建输出文本框 self.textedit.setPlaceholderText(\u0026#34;翻译结果\u0026#34;) # 设置文本框的背景内容 self.textedit.setReadOnly(True) # 设置文本框为只读 hlayout.addWidget(self.textedit) # 将文本框添加到子布局中 TextEditStyle(self.textedit) # 修改文本框的样式，作者创建的方法，非第三方库调用 这段代码并没有什么需要特殊注意的地方，在之前的文章中我们已经用过多次了\n快速翻译列表UI设计 1 2 3 4 5 6 7 8 9 10 11 12 # list layout self.workdist = {\u0026#39;快进\u0026#39;:\u0026#39;forward\u0026#39;,\u0026#39;后退\u0026#39;:\u0026#39;backward\u0026#39;,\u0026#39;暂停\u0026#39;:\u0026#39;pause\u0026#39;,\u0026#39;停止\u0026#39;:\u0026#39;stop\u0026#39;, \u0026#39;播放\u0026#39;:\u0026#39;play\u0026#39;} self.model = QStandardItemModel(0, 1) # 创建一个模型类，0行1列，即没有元素 self.view = QListView(self) # 设置一个ListView对象 self.view.setModel(self.model) # 设置ListView对象的模型为上面创建的模型 for i in self.workdist.keys(): # 做一个for循环，循环从workdist中读取key item = QStandardItem(i) # 按顺序，将key设置为模型元素对象 self.model.appendRow(item) # 将对象添加到模型中 ListViewStyle(self.view) # 修改ListView的样式，作者创建的方法，非第三方库调用 listlayout.addWidget(self.view) # 将ListView对象添加到子布局中 self.view.clicked.connect(self.modelselected) # 将listview的点击状态连接到事件方法modelselected 这里新知识比较多，尤其是出现了一个陌生的控件QListView与一个模型类QStandardItemModel\nQStandardItemModel的定义\n在 PyQt 中，QStandardItemModel 是一个常用的模型类，它提供了一种标准的方式来存储和管理数据，尤其是用于与视图类（如 QListView、QTreeView 和 QTableView）配合使用。QStandardItemModel 是一种基于项（Item）模型的数据结构，它通过 QStandardItem 类来表示每个数据项。\nQStandardItemModel 主要特点：\n基于项的模型：它使用 QStandardItem 来表示数据的每一项，QStandardItem 是存储数据和管理项状态的对象。 支持树形和表格数据：通过 QStandardItemModel 可以管理数据，支持表格和树形结构。它可以通过层次结构来组织数据。 与视图（View）绑定：QStandardItemModel 与 PyQt 中的视图类（如 QListView、QTreeView、QTableView）一起使用，模型控制数据，而视图负责数据的显示和交互。 QListView控件与QComboBox功能相似，但是用途，行为和样式差别较大，直接问大模型会给你长长的一条差别，但在这里，使用QListView的原因是它好看，可自定义样式，且不会收束成一个单个元素，而是完整地展示所有元素。\n布局代码解释完了，接下来我们看一下实现交互功能的代码：\ntranasexchange 1 2 3 4 5 6 7 def tranasexchange(self): cba = self.langfromcb.currentText() cbb = self.langtocb.currentText() if cba == \u0026#34;自动检测\u0026#34;: cba = \u0026#34;English\u0026#34; self.langfromcb.setCurrentText(cbb) self.langtocb.setCurrentText(cba) 这个代码逻辑很简单实际上就是一个获取两个QComboBox的当前选择内容，然后交换它，因为langto并没有自动检测这一选项，所以当langfrom选择的是自动检测，则切换成English。\ntranslating 1 2 3 4 5 6 7 8 def translating(self): print(self.langfromcb.currentText(),\u0026#34; to \u0026#34;,self.langtocb.currentText()) text = self.editor.toPlainText() tran = Translation.translating(text,self.langfromcb.currentText(),self.langtocb.currentText()) if tran == \u0026#34;website is not reachable\u0026#34;: MsgClass().show_HTTP_error(\u0026#34;Website is not reachable\u0026#34;) else: self.textedit.setText(tran) 首先将从什么语种翻译到什么语种打印到log面板上 text变量获取当前输入文本框中的文本内容 将text中的文本内容，当前选择的两个语种，一共3个参数传入Translation对象的translating方法中，该方法才是真正实现翻译功能的方法，该方法会返回一个字符串，tran获取这个字符串 该if的其实就是回应我们开头提出的问题：“需不需要判断网络问题”以及“如果网络异常该怎么办”，在一开始，笔者并没有处理这个异常，直到有一次笔者挂了clash访问GitHub时，无法访问翻译网站，结果导致程序闪退，所以，必须要判断网络问题，才做了这个if判断来抛出异常，使脚本在遇到网络问题时依然能够正常运行。 MsgClass是笔者写的一个消息处理类，主要功能是获取文本，制作一个弹窗，弹窗内容就是获取到的文本，在这里是Website is not reachable 如果网络没有问题，则不会将获取的文本输出到输出文本框中 当然这个网络异常逻辑设计并不完美，因为有可能翻译的内容恰恰是website is not reachable，这样也会导致UI这一部分误以为是网络异常，从而弹窗警告。更优解时返回两个变量，一个变量是翻译内容，一个变量是网站访问情况。if检测网站访问情况，如果非200，如404，则抛出弹窗警告。 modelselected 1 2 3 4 def modelselected(self): print(self.view.currentIndex().data(),\u0026#39;to\u0026#39;,self.workdist[self.view.currentIndex().data()]) self.editor.setText(self.view.currentIndex().data()) self.textedit.setText(self.workdist[self.view.currentIndex().data()]) 如果是点击快速翻译中的某一项，则无需点击翻译按钮，直接完成翻译\n在log面板上打印当前选择的元素以及元素所对应的value（元素为字典中的key） 将元素设置为输入文本框的内容 将元素对应的value设置为输出文本框的内容 本文要点 翻译器的主要UI布局其实是模仿目前市面上大多数的翻译器设计的，主要是模仿微软翻译，即：搜索 Microsoft Translator - 从英语翻译到中文 (简体)。其实，该翻译器的实现，主要也是爬取了微软翻译，翻译器模仿成用户，向微软翻译发送翻译文本，并获取返回的response，拿到翻译后的结果。之所以不爬取有道翻译，是因为有道翻译对爬虫限制很高，现在甚至无法打开开发者工具（如果在有道翻译页面强行打开开发者工具，会导致闪退该页面）。 在这个页面的UI设计中，我们加入了许多新玩意儿，比如ListView，模型类QStandardItemModel，QComboBox，等等有趣的东西，想使用但却没有实际例子模仿的小伙伴可以借鉴参考。 在本文中我们回答了开头的五个问题中的两个，“是否需要判断当前状态是否联网”答案是：需要判断当前状态是否联网，如果不加以判断，当处于断网时，爬虫无法正常爬取网页，会抛出Error或Exception，如果处理，则会导致程序闪退。 “如果处于断网状态如何处理”，答案是，当判断出断网状态时，会抛出弹窗警告，弹窗警告的设计是笔者自做，后续系列更新会介绍。 ","date":"2024-11-07T15:33:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%83/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%83/","title":"基于PyQt开发的脚本集合包（七）"},{"content":"方法在工程中的位置 这一小节需要结合前面的基于PyQt开发的脚本集合包（二）内容来看，在那一篇文章中，我们讲到，我们讲主界面，功能UI界面，以及实现功能本身的方法分别放在了不同的地方以方便我们维护，此方法属于功能的实现，因此与其它脚本功能一同放在了tools目录下，如果要调用该功能，则需要使用import导入模块。\n代码解释 convertor模块中并没有类，只有一个方法，即convertor方法，它接受一个字符串参数，并将字符串进行编码，处理成UTF-8格式，输出十六进制数以及十六进制数的个数\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 def convertor(s): res = \u0026#39;\u0026#39; # 将字符串s编码为UTF-8格式的字节串 strlen = len(s) for i in range(strlen): # 将字节串转换为十六进制表示，同时移除b\u0026#39;\u0026#39;标记并替换\\\\x为0x hexstr = \u0026#39;\u0026#39;.join(f\u0026#39;{byte:02x}\u0026#39; for byte in s[i].encode(\u0026#34;UTF-8\u0026#34;)) hexstr = hexstr.upper() # 可选：转换为大写 # 添加空格使得输出更易于阅读 hexstr_space = \u0026#39;, 0x\u0026#39;.join(hexstr[i:i + 2] for i in range(0, len(hexstr), 2)) hexstr_space = \u0026#39;0x\u0026#39;+hexstr_space res = res + hexstr_space + \u0026#39;, \u0026#39; res = res[:-2] print(res) return res,res.count(\u0026#39;0x\u0026#39;) 以下逐行解释代码：\n初始化res字符串变量， 获取传入的参数s字符串的长度，并传给strlen for循环遍历字符串中的每一个字符 s[i].encode(\u0026quot;UTF-8\u0026quot;)将字符编码为UTF-8字节串 for byte in ...是一个生成器表达式，它遍历编码后的字节串，每个byte表示UTF-8编码中的每一个字节 f'{byte:02x}'将每个字节转换为两位的十六进制字符串，0表示如果十六进制不足两位，则以0补足，2表示宽度位两位，x表示以十六进制格式输出，比如：如果byte的值为255，则会生成\u0026rsquo;ff\u0026rsquo;，如果byte的值为7，则会生成'07' ''.join(...)，join方法将生成器表达式的所有结果连成一个字符串，即格式化操作，例如：一个字符编码为b'\\xe4\\xb8\\xad'，经过格式化后将变成'e4b8ad' upper方法将输出的字符串中所有小写转换成大写 又一个join方法，将hexstr一个字符一个字符拆开，每个两个字符中间便加入, 0x，经过上一个join方法，这次经过格式化操作后，e4b8ad将会变成E4, 0xB8, 0xAD, 0x 在字符串最前面加上0x，变成：0xE4, 0xB8, 0xAD, 0x 删除最后3个字符（-1是最后一个，-2是倒数第二个，但是[]读内容的规则：前面读，后面不读，也就是虽然是最后一位是倒数第二，但实际上倒数第二不读，只读到倒数第三） 打印res结果 返回结果以及0x的计数（通过计算0x来计算有多少个十六进制数） 本文要点 本文中展示了，方法在工程中的位置，以及如何在工作区UI对象中导入该模块 详细解释了convertor方法如何实现字符串转UTF-8格式 其中有许多用法值得我们详细学习，比如join方法的使用，f'{byte:02x}'将每个字节转换成十六进制数，upper方法的使用，[]的读取范围的规则等 ","date":"2024-11-04T21:36:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%85%AD/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%85%AD/","title":"基于PyQt开发的脚本集合包（六）"},{"content":"UTF-8编码器 UTF-8（8位元，Universal Character Set/Unicode Transformation Format）是针对Unicode的一种可变长度字符编码。它可以用来表示Unicode标准中的任何字符，而且其编码中的第一个字节仍与ASCII相容，使得原来处理ASCII字符的软件无需或只进行少部分修改后，便可继续使用。\n比如：在蓝牙领域中，主机与从机自身携带的一些信息如蓝牙名称等，就是由UTF-8编码成十六进制字符串后进行传输，在进行蓝牙开发时，就会经常用到UTF-8编码，因此作者也是自做了一个UTF-8编码器集成到自己的脚本工具包中方便使用。\nUI设计 首先看成品，这个UTF-8编码器的工作区一共有几个部分组成：\n编码内容：是读写文本框，在此文本框中，可输入数字，符号，中文，英文等各种可被UTF-8编码的字符串，该文本框为默认形式，即可读可写。 编码结果：是只读文本框，在此文本框中，会显示编码完成后的结果，即十六进制数字组，例如：PyQt5编码后，编码结果会显示0x50, 0x79, 0x51, 0x74, 0x35，此文本框只允许读，复制等操作，不允许改写其中的内容。 字符数：也是只读文本框，在此文本框中，会显示编码结果的字符数，例如：PyQt5编码后，编码结果为5个十六进制数，字符数就为5，值得注意的是，字符数并不是与编码内容的字符串的长度一定相等，如果你的编码内容中含有中文，1个中文则会有3个十六进制数表示。 按钮：按钮连接了一个方法，在按钮被点击时触发方法，读取编码内容中的字符串，进行处理，然后再将结果输出再编码结果与字符数中。 功能UI的存放目录 在PyQt的第二篇文章（基于PyQt开发的脚本集合包（二））中我们讲到，实现不同功能的UI类是存放在一个相同的目录下，这样方便我们维护，也正是因为功能区的UI放在一个名为Classes的目录下，PrimeWindow不在该目录下。\n因此PrimeWindow想要调用，实现UTF-8编码器的UI界面，需要使用import。\n这表示：导入Classes目录下的ConvertorClass模块，并重命名为ConvertorClass。\n可以回到第四篇文章基于PyQt开发的脚本集合包（四）查看PrimeWindow如何使用这个模块的（在create_stack方法中）。\n代码解释 def __init__ 先看初始化代码，也是这个UTF-8对象的入口（这个UTF-8编码器是写在另一个目录下的一个类，上一篇文章中讲到的PrimeWindow就是调用了这个UTF-8编码器类，创建了一个编码器对象，这个类继承于Qwidget，因此这个编码器对象可以被看作是一个Qwidget来使用。）\nPS：如果对Qwidget这个概念有些模糊的话请看这里（如果熟悉了PyQt的基本知识请继续往下看），Qwidget本质上是一个组件，和按钮，文本框一样，只不过这个组件中可以放其它的组件，你可以把Qwidget想象成一个容器，这个容器装了许多东西，打包起来，然后再放到另一个容器中，像套娃一样。我们这里就是将上面说的三个文本框与按钮排列好放在一个名为Convertor的Qwidget容器中，然后打包成一个类，可供其它更大的Qwidget（比如PrimeWindow）调用。\n1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 def __init__(self): super().__init__() self.layout = QVBoxLayout() # 设置编码器的主布局为垂直布局VBox self.inputlayout = QHBoxLayout() # 设置水平的输入布局，即编码内容（由“编码内容”这四个字的标签与文本框水平布局构成） self.outputlayout = QHBoxLayout() # 设置水平的输出布局，即编码结果 self.countlayout = QHBoxLayout() # 设置水平的计数布局，即字符数 self.layout.addLayout(self.inputlayout) # 将三个布局以此添加进主布局中 self.layout.addLayout(self.outputlayout) # 依次添加会按顺序从上往下排列 self.layout.addLayout(self.countlayout) # 总的来说是三个小布局垂直分布，每个小布局中的两个组件水平分布 self.inputlable = QLabel(\u0026#34;编码内容\u0026#34;,self) # 创建“编码内容”这个四个字的标签 self.inputlayout.addWidget(self.inputlable) # 加入到输入布局中，从左到右排列 self.inputedior = QTextEdit(\u0026#34;输入文本\u0026#34;,self) # 创建输入文本框 TextEditStyle(self.inputedior) # 设置文本框的样式，该方法为作者自写，非第三方库调用 self.inputlayout.addWidget(self.inputedior) # 将文本框添加到输入布局中 convertbtn = QPushButton(\u0026#34;UTF-8编码\u0026#34;,self) # 创建按钮，按钮上的文字为“UTF-8编码” btnReleaseStyleA(convertbtn) # 设置按钮弹起状态的样式，该方法为作者自写，非第三方库调用 convertbtn.clicked.connect(self.converting) # 将按钮的点击状态连接到converting方法上，一旦检测到按钮被点击，则调用该方法 convertbtn.clicked.connect(self.counting) # 同理，将按钮的点击状态连接到counting方法上，一旦检查测到按钮被点击，则调用该方法 self.layout.addWidget(convertbtn) # 将按钮添加到主布局中，因为上面已经添加了三个小布局，因此按钮在布局最下方 self.outputlable = QLabel(\u0026#34;编码结果\u0026#34;,self) # 创建“编码结果”这四个字的标签 self.outputlayout.addWidget(self.outputlable) # 添加到输出布局中 self.outputedit = QTextEdit(\u0026#34;输出文本\u0026#34;,self) # 创建输出文本框 self.outputedit.setReadOnly(True) # 将文本框设置为只读模式 TextEditStyle(self.outputedit) # 设置文本框的样式，作者自写，非第三方库嗲用 self.outputlayout.addWidget(self.outputedit) # 将文本框添加到输出布局中 self.countlable = QLabel(\u0026#34;字符数：\u0026#34;,self) # 与上相同 self.countlayout.addWidget(self.countlable) self.countedit = QTextEdit(\u0026#34;字符数\u0026#34;,self) self.countedit.setReadOnly(True) TextEditStyle(self.countedit) self.countlayout.addWidget(self.countedit) # ********************** 已删，不好看 ********************** # 删除edit边框 # self.countedit.setFrameShape(QFrame.NoFrame) # # 删除edit背景 # self.countedit.setStyleSheet(\u0026#34;background-color: transparent;\u0026#34;) # ********************** 已删，不好看 ********************** self.setLayout(self.layout) # 将主布局设置为Qwidget的布局 def converting converting方法是主要实现UTF-8编码的方法的入口，它并不直接完成该任务，而是获取输入文本框的数据，然后传参给真正的编码方法。\n1 2 3 4 def converting(self): self.text = self.inputedior.toPlainText() self.res,self.count = convertor(self.text) self.outputedit.setText(self.res) 下面逐行解释代码：\n从输入文本框中获取文本内容，在PyQt中，toPlainText是QTextRdit控件的一个方法，用于获取文本框中的所有内容，并返回一个字符串，这与toHtml()不同，后者返回的是HTML格式的文本。 调用convertor这个外部方法，传入的参数就是文本框的内容（字符串），并获取返回结果（两个参数，一个是结果，一个是字符串数）。 将结果设置为输出框的文本。 值得注意的是，这里count变量被形容为self，这也就是说，在同一实例（对象）中，实例中的各个方法（被传入self），都可以调用这个count变量。\ndef counting counting方法的作用就是将上面得到的count设置为计数文本框中的内容。\n1 2 def counting(self): self.countedit.setText(str(self.count)) 为什么要舍近求远做这样一个操作呢，是为了提醒我：\n一个按钮的某一状态连接多个事件是可行的。 使用setText方法对某一文本框填入数据时，参数必须为字符串，如果非字符串的参数，必须使用str()方法转为字符串。 更深入了解self，可支持某一变量在其它方法间共用。 本文要点 本文中展示了，之前文章中铺垫的，功能区的用法。本质上就是功能区是PrimeWindow这个大的容器（Qwidget）专门空出来的一块地方，可以用来放其它的小的容器（Qwidget），其它的小的容器以对象（实例）的方式被创建，然后存放在抽屉（stack）中，这样我们在切换抽屉时，就是在切换小的容器，实现了大容器不变的情况下，大容器中的某一块区域可以灵活变化。 __init__方法是这个对象的入口（创建时被首先调用的函数），当对象被创建时，则会自动地进行初始化，完成整个编译器UI的创建和布局。初始化方法的代码解释写在了代码块中，因为代码较长，如果写出来的话篇幅太大，但是不写的话在CSDN和个人博客中都比较难阅读（无法自动换行），因此建议大家复制下来，贴在VScode中或自己的Typora中看，这样方便一点。 按钮连接的方法是使用xxxbtn.clicked.connect(xxxfunction)，该方法旨在某按键被click（点击）时，调用xxxfunction方法，且可以连接多个方法。 converting方法实际上是一个处理API的方法，负责传参与接收结果，convertor方法在下一篇文章中会介绍。 counting方法可以被整合到converting方法中，不过整个项目是作者的一个学习过程与心得，这样写是为了方便展示一些特性。 如果本文对你有所帮助，请记得给作者的CSDN点赞收藏QAQ，多多逛逛和订阅作者的个人博客，有什么问题或错误请联系作者的CSDN或发送到邮件中，祝大家生活愉快，变得更强！ ","date":"2024-11-04T19:29:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%BA%94/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%BA%94/","title":"基于PyQt开发的脚本集合包（五）"},{"content":"前言 作者的编程环境为VScode，工作时常使用VScode打开整个工程文件夹。如果先打开VScode再从VScode中选择文件夹打开效率太慢，作者一般使用的方式是右键文件夹，直接选择\u0026quot;通过code打开文件夹\u0026quot;，但某天，作者同往常一样工作时发现快捷键不起效，桌面的快捷方式也变成了无法使用的状态。\n通过设置索引回快捷方式的目标和起始位置，发现找不到对应的code.exe文件。这说明可能有以下几种情况：\nVScode在我不知情的情况下被卸载了 VScode中code.exe执行文件被删了 VScode出于某种情况（可能是更新），将执行文件改了名字或移动了位置 更新VScode快捷方式 通过查找VScode的目录，发现code.exe文件从原本的Microsoft VS Code目录下移动到Microsoft VS Code\\_目录下，多了一级目录，暂不清楚什么原因，因此桌面快捷方式不起作用，只需要将快捷方式的目标和起始位置做一下修改，桌面的快捷方式就可以重新使用了。\n右键使用VScode打开文件夹 重装软件 重装软件确实是一个简单且有效的方法，如果你的VScode比较干净的话。但如果你安装了许多插件且配置了多个Python的虚拟环境（那可是一个大工程），那么放弃现在的VScode对你来说可能是一个噩梦。如果你是此类人，我推荐你使用下面的方法。\n修改注册表 使用win + R打开运行，输入regedit打开注册表。\n配置：右键使用vscode打开文件 你可以直接在左侧目录树下找到HKEY_CLASSES_ROOT\\*\\shell，也可以在上方地址栏中输入，索引到相应的目录中\n在此目录下，shell目录下，执行以下操作：\n右键目录新建VisualCode项（根据知乎大神的操作，但是我看原本VScode自动配置时是生成VSCode项，名字似乎无关紧要，重点是其中的数据。如果你本身就有VSCode项，可以尝试直接对VSCode项做修改，而不新建VisualCode项）\n配置操作描述：VisualCode项中有一个名称为(默认)的数据，双击进去填写数值数据用VScode打开这个数据是你右键文件时出现的操作描述\n这个描述可自定义，你改成用用全世界最好用的VScode打开也可以\n配置图标：右键刚才新建的VisualCode项，在VisualCode中新建一个可扩充字符串值，双击该数据，将数值名称改为Icon，将数值数据修改为：Code.exe执行文件的地址，如我的地址为：\nC:\\Users\\86153\\AppData\\Local\\Programs\\Microsoft VS Code_\\Code.exe\n配置命令：右键刚才新建的VisualCode项，在VisualCode项中新建一个项，命名为command，这个项中也会有一个默认值，双击默认，修改数值数据为：\u0026quot;your\\path\\Code.exe\u0026quot; \u0026quot;%1\u0026quot;，注意：要有\u0026quot;\u0026quot;引号，%1为要打开的文件参数\n配置：右键使用vscode打开文件夹 找到HKEY_CLASSES_ROOT\\Directory\\shell目录。\n除了更改目录，其它操作与上面的完全一样\n配置：右键空白处使用vscode打开文件夹 找到HKEY_CLASSES_ROOT\\Directory\\Background\\shell目录。 把command中的数值数据中的%1改成%V 其它操作与上面完全一样 效果 现在，你就可以使用右键文件夹，使用vscode打开该文件夹\n参考文章：右键菜单加入用VSCode打开文件和文件夹 - 知乎\n","date":"2024-11-04T09:45:00+08:00","image":"https://Lyrical-wander.github.io/p/vscode%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/VScodeShortCutLogo_hu9814141210490913990.png","permalink":"https://Lyrical-wander.github.io/p/vscode%E6%97%A0%E6%B3%95%E4%BD%BF%E7%94%A8%E5%8F%B3%E9%94%AE%E7%94%A8vscode%E6%89%93%E5%BC%80%E6%96%87%E4%BB%B6%E5%A4%B9%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/","title":"VSCode无法使用右键“用VScode打开文件夹”解决办法"},{"content":"PyQt主窗口框架设计(QWidget) PrimeWindow.py的主要作用是绘制主窗口，在主窗口中：\n最左边是各种功能组件的入口，比如：翻译器，UTF-8转换，图像处理等。 按下左边的按键，则会切换功能区，切换功能并非重新开一个窗口，而是切换中间部分，这里主要是采用stack的原理 最右边是日志打印区，通过重定向的方法，把打印在操作台的内容打印到这个窗口上，这样方便开发人员debug 4.1 import部分 1 2 3 4 5 6 7 8 import Classes.TranslatorClass as TranslatorClass import Classes.ConvertorClass as ConvertorClass import Classes.AudioProcessClass as AudioProcessClass import Classes.AudiocodecClass as AudiocodecClass import Classes.AudioPlayerClass as AudioPlayerClass import Classes.ImgProcessClass as ImgProcessClass from component.btnStyle import * from component.editStyle import * 这些引用均来自作者自己的代码，分别保存在Classes目录下和component目录下，从这些目录下import不同的类或方法供PrimeWindow调用。\nClasses中的各种类，如TranslatorClass，保存着翻译功能的功能区UI结构：翻译按钮，翻译内容输入框以及翻译结果展示框等，以及各组件的摆放位置。\ncomponent中的各种方法，如btnStyle，该文件中有按钮按下的样式，按钮抬起的样式等，只需在点击按钮时调用该方法即可改变按钮样式。\n4.2 重定向操作台输出 重定向操作台输出需要调用一些系统方法\n1 2 3 4 5 6 7 current_directory = os.getcwd() # 获取当前工作目录，并将其存储在current_directory中。 self.original_stdout = sys.stdout # 将当前的标准输出（操作台）保存到self.original_stdout中，这样可以在将来恢复标准输出 self.output_stream = io.StringIO() # 创建一个StringIO对象，这个对象像一个文件，可以在内存中操作字符串，之后的标准输入输出将写入这个对象 sys.stdout = self.output_stream # 将标准输出重定向到刚才创建的StringIO对象self.output_stream。这样，所有通过print语句输出的信息都将储存在output_stream中，而不是打印到操作台 self.timer = QTimer() # 创建一个定时器对象，用于定期触发某些事件 self.timer.timeout.connect(self.updateOutput) # 将定时器的信号连接到self.updateOutput方法上，当定时器达到超时时间时则会调用该方法 self.timer.start(1000) # 设置定时器的超时时间为1000ms即1s 以上实现的是：重定向操作台的输出，开启定时器，每1s后，将原本pirnt方法打印到操作台的字符串储存起来，并调用updateOutput方法\n以下是代码逐行分析：\n获取当前工作目录，并将其存储在current_directory中 将当前的标准输出（操作台）保存到self.original_stdout中，这样可以在将来恢复标准输出 创建一个StringIO对象，这个对象像一个文件，可以在内存中操作字符串，之后的标准输入输出将写入这个对象 将标准输出重定向到刚才创建的StringIO对象self.output_stream。这样，所有通过print语句输出的信息都将储存在output_stream中，而不是打印到操作台 创建一个定时器对象，用于定期触发某些事件 将定时器的信号连接到self.updateOutput方法上，当定时器达到超时时间时则会调用该方法 设置定时器的超时时间为1000ms即1s updateOutput方法：\n1 2 3 4 5 6 7 8 9 def updateOutput(self): output = self.output_stream.getvalue() # 从output_stream中获取字符串 if output: # 如果其中有字符串的话 cursor = self.consoleedit.textCursor() # 获取日志打印文本编辑控件的当前光标，方便在特定的位置插入文本 cursor.movePosition(QTextCursor.End) # 将光标移动至结尾，以便现有文本插入新的输出内容 cursor.insertText(output) # 将内容添加到日志打印文本编辑控件中 self.consoleedit.setTextCursor(cursor) # 更新光标位置为刚刚移动的光标，这确保了后续的输入或操作将从正确的位置开始 self.consoleedit.ensureCursorVisible() # 确保光标在文本编辑器中可见，特别是光标在底部时，防止用户无法看到最新的插入内容，尤其是文本框不够大时 self.output_stream.truncate(0) # 清空output_stream中的内容，将其内容截断为0，使得下一轮输出时不会将之前的内容重复添加 通过这个方法，即可将打印的内容输出到日志打印区中。并每1秒就检查一次是否有新的内容需要输出\n因为是利用定时器每1秒检查一次是否有新的输出内容，所以输出并不是实时进行的，如你需要更精确的日志打印，则调小定时器的超时时间，但请注意，定时器的超时时间越短，定时器就会越频繁地调用updateOutput方法，即使什么新内容也没有。如果你需要做一些复杂且精密的操作，则可能需要考虑时间与空间开销的问题。 以下是代码逐行分析：\n从output_stream中获取字符串 如果其中有字符串的话 获取日志打印文本编辑控件的当前光标，方便在特定的位置插入文本 将光标移动至结尾，以便现有文本插入新的输出内容 将内容添加到日志打印文本编辑控件中 更新光标位置为刚刚移动的光标，这确保了后续的输入或操作将从正确的位置开始 确保光标在文本编辑器中可见，特别是光标在底部时，防止用户无法看到最新的插入内容，尤其是文本框不够大时 清空output_stream中的内容，将其内容截断为0，使得下一轮输出时不会将之前的内容重复添加 4.3 stackLayout 切换功能 在PyQt中，QStackLayout是用于在同一位置上堆叠多个小组件的布局管理器，允许根据需要在它们之间进行切换，这对实现标签页或动态内容展示非常有用\n1 2 3 4 5 6 def create_stack(self): # create a stack layout self.stacklayout = QStackedLayout() convertor = ConvertorClass.Wconvertor() self.stacklayout.addWidget(convertor) 创建stacklayout 把功能UI实现的对象添加在stacklayout中 1 2 3 4 5 6 7 # set the convertor buttons self.UTF8ConvertorBtn = QPushButton(\u0026#34;UTF-8 转换\u0026#34;) # 创建按钮对象 btnReleaseStyleA(self.UTF8ConvertorBtn) # 修改按钮样式，该方法为作者创建，并非第三方库调用 self.UTF8ConvertorBtn.clicked.connect(self.Cbtn_press_clicked) # 为按钮连接触发事件，该事件会切换stack # add the buttons to the layout self.btnlayout.addWidget(self.UTF8ConvertorBtn) # 将按钮添加到功能按钮区布局 updateButtonStyle(self,self.UTF8ConvertorBtn) # 更新按钮样式，该方法为作者创建，并非第三方库调用 UTF8ConvertorBtn按钮连接上了Cbtn_press_clicked方法，表示当该按钮被按下时，则调用Cbtn_press_clicked方法。同时我对按钮的样式做了修改，使用方法btnReleaseStyleA，因为要对按钮做批量相同的修改，因此集成到一个方法中去调用是常见的编程思想。\n1 2 3 def Cbtn_press_clicked(self): updateButtonStyle(self,self.UTF8ConvertorBtn) # 更新按钮样式，该方法为作者创建，非第三方库调用 self.stacklayout.setCurrentIndex(0) # 将当前stack布局设置为第一个抽屉 setCurrentIndex方法的意思是，stacklayout所占据的这一片区域，可以随意切换成被它add了的widget，它就像一个抽屉一样，抽屉的大小固定，但是这个固定的大小所展示的内容是由你抽出第几层决定。就比如参数为0，则抽出的是第1个抽屉，这个抽屉是一个widget，这个widget可以套一个layout，其中放各种各样的组件。同理，参数为1,则表示抽出第2个抽屉，则stacklayout所占据的这一片区域就会切换成第2个抽屉的样子。\n4.4 UI初始化 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 def initUI(self): #---------------- create Layout we needed ---------------------------- self.Mainlayout = QHBoxLayout() # 主窗口 self.Primarylayout = QVBoxLayout() # 功能区布局 self.btnlayout = QVBoxLayout() # 功能按钮区布局 #---------------- create Layout we needed ---------------------------- #---------------- there has more btn but unshowing ------------------- # set the convertor buttons self.UTF8ConvertorBtn = QPushButton(\u0026#34;UTF-8 转换\u0026#34;) # 创建按钮对象 btnReleaseStyleA(self.UTF8ConvertorBtn) # 修改按钮样式，该方法为作者创建，并非第三方库调用 self.UTF8ConvertorBtn.clicked.connect(self.Cbtn_press_clicked) # 为按钮连接触发事件，该事件会切换stack # add the buttons to the layout self.btnlayout.addWidget(self.UTF8ConvertorBtn) # 将按钮添加到功能按钮区布局 updateButtonStyle(self,self.UTF8ConvertorBtn) # 更新按钮样式，该方法为作者创建，并非第三方库调用 #---------------- there has more btn but unshowing ------------------- self.btnlayout.setAlignment(Qt.AlignTop) # 调整按钮区的各组件对齐方式为向上对齐，而非均匀分布 #----------------- put the stack in function area -------------------- widget = QWidget() # 创建一个widget，用于存放stack布局 widget.setLayout(self.stacklayout) # 将stack布局放到widget中 self.Primarylayout.addWidget(widget) # 将widget放到功能区布局中，至此stack在功能区中进行切换 #----------------- put the stack in function area -------------------- #---------------------- create log area ------------------------------ self.Consolelayout = QVBoxLayout() # 创建日志区布局 self.consoleedit = QTextEdit() # 创建日志编辑文本框 self.consoleedit.setReadOnly(True) # 文本框设置为只读 TextEditStyle(self.consoleedit) # 修改文本框样式， 该方法为作者创建，并非第三方库调用 self.consoleedit.verticalScrollBar().setPageStep(100) # 修改滚动条步长 self.Consolelayout.addWidget(self.consoleedit) # 添加文本框到日志区布局中 #---------------------- create log area ------------------------------ #------------------ put the layouts in main layout ------------------- self.Mainlayout.addLayout(self.btnlayout,stretch=1) # 将按钮布局添加到主布局中 self.Vline = QFrame(self) # 添加细线 将按钮区与功能区分隔开 self.Vline.setFrameShape(QFrame.VLine) # 优化细线 self.Vline.setFrameShadow(QFrame.Raised) # 使细线具有凸起的立体感 self.Vline.setLineWidth(3) # 设置细线外部粗细 self.Vline.setMidLineWidth(1) # 设置细线内部粗细 self.Mainlayout.addWidget(self.Vline) # 将细线添加至主布局 self.Mainlayout.addLayout(self.Primarylayout,stretch=4) # 将功能区添加至主布局中 self.Mainlayout.addLayout(self.Consolelayout,stretch=2) # 将日志区添加至主布局中 # add the layout to the window self.setLayout(self.Mainlayout) # 将主窗口的布局设置为主布局 #------------------ put the layouts in main layout ------------------- 4.5 结语 到目前为止，我们脚本工具集合包已经具备了初步的大致框架，三大区块已经被划分出来了，接下来的工作将重点放在要开发哪些功能，如何实现这些功能，以及这些功能的UI页面布局。这个系列将会==持续更新==，动手能力强的小伙伴可以根据路线自己实操一遍，后续我也会将完整代码开源带GitHub上（等系类差不多结束的时候），同时系列文章也会同步更新到我的CSDN博客中，如果本系列真的帮助到你，请关注本频道，并给我的CSDN==点赞收藏==QAQ，感激不尽！\n如有任何疑问，欢迎私信我的CSDN或发邮件到707973090@qq.com，在我看到时会第一时间回复！\n","date":"2024-11-01T10:43:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%9B%9B/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E5%9B%9B/","title":"基于PyQt开发的脚本集合包（四）"},{"content":"PyQt程序入口（QMainWindow） main.py是程序的入口，程序最开始运行的文件，在这个文件中，需要完成以下几件事：\n创建一个MainWindow（主窗口） 设置主窗口的标题，图标 设置窗口的主体（centralWidget） 设置窗口的状态栏 创建workspaces目录 运行窗口 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 import sys import os from PyQt5.QtWidgets import * from PyQt5.QtGui import * from PyQt5.QtCore import * import PrimeWindow class MainWindow(QMainWindow): def __init__(self): super().__init__() self.setWindowTitle(\u0026#34;Script Tools\u0026#34;) self.setWindowIcon(QIcon(\u0026#34;_internal/res/icon/icon.ico\u0026#34;)) centralWidget = PrimeWindow.PrimeWindow() self.setCentralWidget(centralWidget) self.addStatusBar() def addStatusBar(self): self.statusBar = QStatusBar() self.statusWidget = QWidget() self.statusLayout = QHBoxLayout() self.copyrightlable = QLabel(\u0026#34;© Author: LyricalRover. All rights reserved.\u0026#34;) self.versionlable = QLabel(\u0026#34;Last updated: 2024-10-18. Version: 1.3.1\u0026#34;) self.statusLayout.addWidget(self.copyrightlable) self.statusLayout.addStretch() self.statusLayout.addWidget(self.versionlable) self.statusWidget.setLayout(self.statusLayout) self.statusBar.addWidget(self.statusWidget) self.setStatusBar(self.statusBar) if __name__ == \u0026#34;__main__\u0026#34;: app = QApplication(sys.argv) w = MainWindow() if not os.path.exists(\u0026#34;workspaces\u0026#34;): os.makedirs(\u0026#34;workspaces\u0026#34;) w.show() app.exec() 最开始进入的地方是：if__name__ == \u0026ldquo;_main_\u0026rdquo;:\napp = QApplication(sys.argv)初始化应用程序对象\n1. QApplication 类 QApplication 是 Qt 应用程序的主类，负责管理应用程序的控制流和主要设置。 它处理应用程序的主事件循环，并为 GUI 元素提供必要的支持。 每个使用 Qt 的应用程序通常需要一个 QApplication 实例。 2. sys.argv 的作用 sys.argv 是一个列表，包含命令行参数。这些参数是在运行 Python 脚本时传递的。 QApplication 可以使用这些参数来配置应用程序的行为，例如窗口大小、样式等。 3. 初始化应用程序 通过 app = QApplication(sys.argv)，你完成了以下几个步骤：\n创建应用程序对象：这行代码创建了一个 QApplication 的实例，并将命令行参数传递给它。 设置事件循环：这个实例负责管理 GUI 的事件循环，使得应用程序能够响应用户输入和事件（例如鼠标点击、键盘输入等）。 为应用程序提供上下文：QApplication 提供了关于应用程序的信息，例如样式、主题、字体等。 创建MainWindow对象，即运行上面的class中的代码\ndef __init__中，设置窗口的标题，设置窗口的图标，在这里可以看到，设置图标的路径是：_internal/res/icon/icon.ico，但我们并没有创建这个__internal的目录，回顾环境配置中pyinstaller部分的讲解：“pyinstaller在v6.0版本以后，数据将被移动到__internal目录下”，也就是说，如果我们打包程序形成exe文件后，想要文件能够正确找到icon的地址，则必须在你写的地址前加上__internal目录，配合上打包时的参数,-add-data \u0026quot;icon.ico;__internal/res/icon/icon.ico\u0026quot;，就可以在打包后显示正常的图标。\n1 centralWidget = PrimeWindow.PrimeWindow() 上面的代码是创建一个UI主体，该主体是PrimeWindow对象，这个类在PrimeWindow.py中，这个主体内具体是怎样的后面会讲到。\naddStatusBar的结构如下图所示：\n左右分别是两个label的Widget，分别装了两条信息，中间用addStretch弹簧将两个label分压向两侧。\n理想很丰满，现实很骨感，实际上并没有呈现出这样一个操作，我猜测应该是有另一个东西阻碍了StatusBar，并没有完整占据整个窗口的下方，也就是说，StatusBar本身被压缩了，导致versionlabel并没有被压向窗口主体的右侧。但具体原因尚不明朗。\n还有一点值得注意的是：\n我在引入第三方库的时候因为偷懒使用了“*”，即：from PyQt5.QtWidgets import *等。\n建议使用了什么就引入import什么，而不是为了图方便而直接使用“*”，理由如下：\npython模块的导入实际上是通过import来进行导入的，一个模块一旦被导入，后续的导入操作则直接从缓存中读出，而不会重复导入，这就说明，在初次操作时，需要加载导入内容，如果使用“*”，初次导入的时间开销会更多一些，但后续的性能差别并不明显。 由于import *会导入所有的公共成员，因此它可能会占用更多的内存，因此空间开销会更大。 使用更明确的导入方式，会有助于代码的可读性，避免不必要的模块加载，减少潜在的时间和空间开销，同时较少命名冲突的风险，这种情况在大型项目中更为明显。 ","date":"2024-11-01T10:40:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%89/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%89/","title":"基于PyQt开发的脚本集合包（三）"},{"content":"布局 2.1 UI页面布局 整体框架分为分为三个部分，垂直分布。\n第一个部分为功能选择按钮（如UTF-8转换，翻译器等）\n第二部分为功能区，即对应功能输入，输出展示区\n第三部分为后台区，显示对应的后台信息（本质上是将终端输出的print重定向至这块区域，方便调试以及使用）\n除此之外，整体的下方状态信息栏中有版本信息\n整体布局如下图所示：\ntips：\n这个界面是直接在vscode中运行时所展示的，因此图标以及部分按钮并未完全列装（不保证debug与打包一致的原因较为复杂，与pyinstaller的版本有关，后续内容会解释），图标列装后如下所示：\n2.2 工程布局 在创作自己的程序前（如果是较大的程序），最好需要规划一下自己的工程结构，用多个不同的目录保存不同的资源，如图像，文本，代码等，而代码中，实现不同功能的subprograms（子程序）也可以再细分在不同的目录中，尤其是可以多个subprogram（子程序）反复调用的subprograms（子程序）或scripts（脚本）。\n我的工程布局意识也是在这个项目中不断完善的，还有一些不足和错误的地方也在不断更新中。\n一级目录 MyScriptTools目录是包目录，为了方便管理我们需要用到的各种包文件，需要在项目开始时便创建好该项目python运行的虚拟环境（虚拟环境具体的创建流程看前文）。创建完成后，使用pip包管理器下载的所有包都会保存在这个包目录中。（因为我的虚拟环境名字叫MyScriptTools，因此包目录的名字也叫MyScriptTools） src是存放代码的位置，所有的代码都存放在这个目录下 workspaces目录是运行时创建的保存文件目录，因为我的项目中，有一些功能或脚本会产生新的文件，我希望它们被保存在一个统一的空间，看起来不会太过混乱，因此专门设计了这一个功能：在程序运行时，创建一个workspaces目录，以后若产生新的文件，统一保存在workspaces目录下 BingTranslator.py与test.py是两个测试脚本，目前已经失去了作用 src目录 Classes：该目录下存放着各种功能的功能区UI类，error类等，如TranslatorClass.py为翻译功能的UI设计，包括按钮，文本框的布局等 component：该目录下存放着修改组件样式的方法，如editStyle.py文件中存放着修改QLineEdit样式的方法以及修改QTextEdit样式的方法。这样如果有多个QLineEdit组件需要修改样式时，只需要调用其中的方法即可。 dist：该目录是使用pyinstaller将程序打包成exe可执行文件时生成的，exe可执行文件存放在其中 res：该目录下存放着需要使用的图片，图标等资源文件 tools：该目录下存放着脚本以及功能的实现，如：实现翻译的功能方法存放在tools目录下的translation.py文件中，Classes目录下的TranslatorClass.py文件中会调用translation.py文件来实现功能 xxx.spec：该文件是如果打包时使用了\u0026ndash;onefile参数，即打包生成一个单独的exe文件，则会产生该文件，该文件记录了一些打包时需要关注的信息 icon.ico：图标文件，可要可不要，如果不要，在打包时想要生成exe文件的图标时需要指定图标的路径，我懒得指定路径，只想填个名字，就把图标放在与main.py同一目录下 main.py：该文件时程序的入口，与C程序的main相同。打包时需要指定程序入口，即该文件 PrimeWindow.py：主UI框架，即主窗口，上面Classes中的UI仅为功能区UI，属于主窗口的三部分之一 2.3 布局思想 我的布局思想是在不断碰壁的过程中自己摸索出来的，在开发这个程序之初并没有想把它做成一个完整的具有UI界面的功能集合包，因此一开始并没有工程布局的概念，需要做什么便在src下新建一个文件开始编码，这种习惯的弊端在随着程序愈发庞大而变得愈发清晰，使程序越来越难管理且开发难度增大。之后抽时间将程序整理了一遍，便形成了这种布局。个人观念，仅供参考。\n我的工程布局思想主要遵循两个原则：\n归类 相同属性或相同功能或本质相同的文件放在一个目录下，如：图片，文本等文件属于输入文件，只可被调用，因此放在同一目录res下，当然，res下可再做区分，img，icon，txt等。不同的功能区UI可放在同一目录下，这样可以将primeWindow与功能UI区分开来，且方便primeWindow调用功能UI，来实现功能的切换。功能的实现放在tools目录下，classes可以调用tools下相应的功能。tools目录下，部分功能过于复杂无法用一个文件完成也可以再建立子目录。\n重复调用 如果遇到需要反复调用的功能，可集成出来单独形成一个方法单独存放，方便不同文件的调用，而不需要重复实现，如文本框，单行文本框，按钮等样式，实现选择文件等功能\n","date":"2024-11-01T10:36:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%BA%8C/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%BA%8C/","title":"基于PyQt开发的脚本集合包（二）"},{"content":"前言 作者因为工作需要，用python写了一些脚本用于数据处理，UTF-8转换，以及一些我的工作专属脚本，又因为想要偷懒，用爬虫爬取了微软翻译的页面做了一个自己的翻译器，近来突发奇想，想要把各种python写的脚本整合到一起，并写一个GUI应用程序，因此PyQt进入了我的视野。想着用业余时间一点一点摸索，到目前为止算是做的有模有样，现写博客记录下来。\n这个GUI程序会分成一个系列更新，把我的UI框架，布局，工程整理，功能编写等等都写出来，包括：利用爬虫爬取微软翻译来做自己的翻译器，图像处理等。\n本脚本工具包还在持续更新（部分功能我也还没有完成），目前还没有做完的功能有：做音频数据处理（抓取BLE音频数据包，自动去包头去CRC校验，获取raw data的功能），音频编解码（利用市面上常见开源编解码器对音频数据进行编码或解码，ADPCM，SBC等），后续根据需要和精力，看能不能做音频数据的时域频域转换器等等。都是美好幻想，敬请期待！\n因为程序还在不断地完善更新，所以到系列结束时，代码应该就已经更新完成了，到时候我会将代码开源到我的GitHub仓库上，有兴趣的小伙伴可以下载使用或交流学习。本系列文章也会同步更新到我的CSDN博客中，如果小伙伴们觉得本系列对你有帮助，麻烦点个赞与收藏，感激不敬！\n环境配置 1.1 Python环境 python下载 python下载网上有许多教程，这里不赘述了，我的编程环境是vscode，创建虚拟环境，\n创建虚拟环境 1 python -m venv myPyQt #创建虚拟环境，命名为myPyQt 可以在终端查看包列表\n1 2 pip list # 看列表中是否有PyQt5相关的包 1.2 PyQt5安装 创建好虚拟环境后先进入虚拟环境，然后在该虚拟环境中下载PyQt5\n1 pip install PyQt5 -i https://pypi.tuna.tsinghua.edu.cn/simple # -i + 地址 为从国内镜像网站下载，提升下载速度 下载好qt后可以测试一下是否安装成功\n1 2 3 from PyQt5.QtCore import * print(QT_VERSION_STR) # 如果没有报错，则说明安装成功 1.3 Pyinstaller 打包命令：\n1 pyinstaller -n yourProgramName -i icon/path/icon.ico --add-data \u0026#34;path/xxx.png;.\u0026#34; --add-data \u0026#34;CanAddLotData.ico;path/in/__interval\u0026#34; -w main.py -n：你程序的名字\n-i：你应用的图标，如果与程序入口（main）不在同一目录下，则需要给出相应的路径\n\u0026ndash;add-data：链接外部资源，比如图片，图标等资源，该参数分为两个部分，使用“:”（Linux）或“;”（Windows）隔开，前面是打包前该文件的路径，后面是打包后该文件要保存的路径，下面是重点\n值得注意的是，pyinstaller在v6.0版本以后，如果没有加入--onefile参数，那么打包后会生成一个附带的目录__internal，打包后你的文件会保存在该目录下，比如：--add-data \u0026quot;res/xx.icon;res/xx.icon\u0026quot;，那么pyinstaller会在与main.py相同的目录下寻找一个res目录下的xx.icon文件，将其作为外部资源链接到程序中，并在__internal目录下创建一个res目录，存放一个xx.icon文件。如果你使用了--onefile参数，那么将不会创建__internal目录，res目录将会创建在与exe文件相同的目录下。GitHub上有对该问题的解释：Regression: datas moved to _internal in pyinstaller 6.1.0. pyinstaller 5.13.1 puts datas in correct directory · Issue #8075 · pyinstaller/pyinstaller\n切记切记这一点，因为这影响到你程序中调用资源文件时该如何填写路径，如果还没弄懂没有关系，后面会在代码中详细解释\n-w：此参数用于创建不显示命令行窗口的GUI程序，即：避免应用程序运行时弹出命令行窗口\nmain.py：程序入口\n如果你在使用 -i 命令时遇到来了以下报错：\n1 Received icon image \u0026#39;D:\\python\\MyScriptTools\\src\\icon.ico\u0026#39; which exists but is not in the correct format. On this platform, only (\u0026#39;exe\u0026#39;, \u0026#39;ico\u0026#39;) images may be used as icons. If Pillow is installed, automatic conversion will be attempted. Please install Pillow or convert your \u0026#39;ico\u0026#39; file to one of (\u0026#39;exe\u0026#39;, \u0026#39;ico\u0026#39;) and try again. 说明你使用的图标文件格式不正确，只有exe或ico格式的图像才可以用作图标。如果系统无法识别你的ico或你只有jpg或png等格式的图标，可以安装pillow，它会为你解决一切\n1 pip install pillow 那么到此为止，你做好了开发PyQt的前置工作\n","date":"2024-11-01T10:30:00+08:00","image":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%80/PythonForQt_hu4428717925490777624.png","permalink":"https://Lyrical-wander.github.io/p/%E5%9F%BA%E4%BA%8Epyqt%E5%BC%80%E5%8F%91%E7%9A%84%E8%84%9A%E6%9C%AC%E9%9B%86%E5%90%88%E5%8C%85%E4%B8%80/","title":"基于PyQt开发的脚本集合包（一）"}]